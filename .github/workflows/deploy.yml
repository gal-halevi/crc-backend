name: Backend deployment
on:
  push:
    branches:
      - 'main'
    paths:
      - 'lambda_visitor_counter.py'
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'

permissions:
  id-token: write
  contents: read

jobs:
  Deply:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    defaults:
      run:
        shell: bash
    env:
      IAC_PATH: terraform

    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{vars.ROLE_TO_ASSUME}}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        env:
          TESTS_PATH: tests/unit
        run: python -m pytest -v "$TESTS_PATH"

      - name: Checkout IaC code
        uses: actions/checkout@v4
        with:
          repository: gal-halevi/cloud-resume-challenge-iac
          path: ${{env.IAC_PATH}}
          ref: support-for-multiple-envs

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # Causing issues when trying to capture terraform output
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{env.IAC_PATH}}/${{vars.IAC_ENV_DIR}}
        run: terraform init

      - name: Deploy
        working-directory: ${{env.IAC_PATH}}/${{vars.IAC_ENV_DIR}}
        env:
          TF_VAR_source_file_path: "../../lambda_visitor_counter.py"
          TF_VAR_env: ${{vars.ENV}}
          TF_VAR_api_cors_allowed_origins: ${{ vars.API_CORS_ALLOWED_ORIGINS }}
        run: terraform apply -auto-approve -input=false

      - name: Get Terraform Outputs
        id: tf_output
        working-directory: ${{env.IAC_PATH}}/${{vars.IAC_ENV_DIR}}
        run: |
          api_url=$(terraform output -raw apiUrl)
          echo "API_URL=$api_url" >> "$GITHUB_OUTPUT"
          table_name=$(terraform output -raw tableName)
          echo "TABLE_NAME=$table_name" >> "$GITHUB_OUTPUT"
          primary_key=$(terraform output -raw primaryKey)
          echo "PRIMARY_KEY=$primary_key" >> "$GITHUB_OUTPUT"
    
      - name: Run Smoke Tests
        env:
          TESTS_PATH: tests/smoke
          API_URL: ${{steps.tf_output.outputs.API_URL}}
          TABLE_NAME: ${{steps.tf_output.outputs.TABLE_NAME}}
          PRIMARY_KEY: ${{steps.tf_output.outputs.PRIMARY_KEY}}
        run: python -m pytest -v "$TESTS_PATH"